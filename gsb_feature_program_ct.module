<?php
/**
 * @file
 * Code for the GSB Feature Program Content Type feature.
 */

include_once 'gsb_feature_program_ct.features.inc';

/**
 * Implementation of hook_module_implements_alter()
 */
function gsb_feature_program_ct_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'entity_view') {
    if (isset($implementations['gsb_feature_program_ct'])) {
      $group = $implementations['gsb_feature_program_ct'];
      unset($implementations['gsb_feature_program_ct']);
      $implementations['gsb_feature_program_ct'] = $group;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gsb_feature_program_ct_form_node_form_alter(&$form, &$form_state) {
  $language = $form['language']['#value'];
  if ($form['type']['#value'] != 'program') {
    return;
  }
  drupal_add_js(drupal_get_path('module', 'gsb_feature_program_ct') . '/js/gsb_feature_program_ct.js');

  $form['title']['#title'] = 'Program Name';

  // show/hide the key image
  $form['field_image_key_image']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '0'),
      ),
    ),
  );

  $form['field_additional_pages'][$language][0]['#title'] = '';
  unset($form['field_additional_pages'][$language][0]['field_page_link'][$language][0]['#title']);

  // hide the n/a option for field_program_contact_options radio buttons
  unset($form['field_program_contact_options']['und']['#options']['_none']);

  // show/hide the program contact fields based on field_program_contact_options value
  $form['field_program_director_name']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'display_a_person'),
      ),
    ),
    'required' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'display_a_person'),
      ),
    ),
  );
  $form['field_program_contact_link']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'link_to_page'),
      ),
    ),
    'required' => array(
      ':input[name="field_program_contact_options[' . $language . ']"]' => array(
        array('value' => 'link_to_page'),
      ),
    ),
  );

  // hide the n/a option for field_image_or_video radio buttons
  unset($form['field_image_or_video'][$language]['#options']['_none']);

  // show/hide the image or video fields based on field_image_or_video value
  $form['field_learn_more_photo']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Image'),
      ),
    ),
  );
  unset($form['field_learn_more_video_title']);
  unset($form['field_video_description']);
  unset($form['field_video_url']);
  $form['field_video'][$language][0]['field_title'][$language]['#required'] = 0;
  $form['field_video'][$language][0]['field_title'][$language][0]['#required'] = 0;
  $form['field_video'][$language][0]['field_title'][$language][0]['value']['#required'] = 0;
  unset($form['field_video']['und'][0]['remove_button']);
  unset($form['field_video']['und']['add_more']);
  $form['field_video']['#states'] = array(
    'visible' => array(
      ':input[name="field_image_or_video[' . $language . ']"]' => array(
        array('value' => 'Video'),
      ),
    ),
  );

  $form['field_part_time_details']['#states'] = array(
    'visible' => array(
      ':input[name="field_time_commitment[' . $language . ']"]' => array(
        array('value' => '34896'),
      ),
    ),
  );

  $form['field_link_single']['#states'] = array(
    'visible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_overview_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );
  $form['field_key_benefits_description']['#states'] = array(
    'invisible' => array(
      ':input[name="field_program_detail[' . $language . ']"]' => array(
        array('value' => '1'),
      ),
    ),
  );

  $form['field_brochure_pdf'][$language][0]['#description'] = '';

  if ($form['field_brochure_options']['und']['#default_value'] == null) {
    $form['field_brochure_options']['und']['#default_value'] = 'no_brochure_download';
  }

  // Remove the n/a option for brochure options radio buttons
  unset($form['field_brochure_options'][$language]['#options']['_none']);

  // Visible state settings for the Brochure PDF upload and link fields

  $form['field_brochure_pdf']['#states'] = array(
    'invisible' => array(
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_pdf"' => array(
        '!value' => 'brochure_link_pdf',
      ),
      ':input[name="field_brochure_options[' . $language . ']"],value="brochure_link_ee_lead_form"' => array(
        '!value' => 'brochure_link_ee_lead_form',
      )
    ),
  );
  $form['field_download_brochure_link']['#states'] = array(
    'visible' => array(
      ':input[name="field_brochure_options[' . $language . ']"]' => array(
        'value' => 'brochure_link_other',
      )
    ),
  );
  $form['field_brochure_program_topics']['#states'] = array(
    'visible' => array(
      ':input[name="field_brochure_options[' . $language . ']"]' => array(
        'value' => 'brochure_link_ee_lead_form',
      )
    ),
  );

  // set the Edit Curriculum Page markup
  if (!empty($form['#node'])) {
    $edit_path = _gsb_feature_program_ct_create_ppp_path($form['#node'], 'curriculum');
    $edit_path = drupal_lookup_path('source', $edit_path);
    if ($edit_path) {
      $edit_path = $edit_path . '/edit';
      $form['field_edit_curriculum_page'][$language][0]['markup']['#markup'] = '<a href="/' . $edit_path . '" target="_blank">' . t('Edit Curriculum Page') . '</a>';
    }
    else {
      unset($form['field_edit_curriculum_page']);
    }
  }

  // set the Edit Participants Page markup
  if (!empty($form['#node'])) {
    $edit_path = _gsb_feature_program_ct_create_ppp_path($form['#node'], 'participant-profile');
    $edit_path = drupal_lookup_path('source', $edit_path);
    if ($edit_path) {
      $edit_path = $edit_path . '/edit';
      $form['field_edit_participants_page'][$language][0]['markup']['#markup'] = '<a href="/' . $edit_path . '" target="_blank">' . t('Edit Participants Page') . '</a>';
    }
    else {
      unset($form['field_edit_participants_page']);
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_program_ct_field_widget_link_field_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_page_link') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_page_link_after_build';
  }
}

/**
 * #after_build callback for changing the link widget text for the program page link.
 */
function gsb_feature_program_instance_ct_program_page_link_after_build($element, &$form_state) {
  $element['title']['#title'] = t('Page Title');
  return $element;
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function gsb_feature_program_ct_field_widget_video_embed_field_video_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['field_name'] == 'field_video_url') {
    $element['#after_build'][] = 'gsb_feature_program_instance_ct_program_video_url_after_build';
  }
}

/**
 * #after_build callback for changing the video url label text.
 */
function gsb_feature_program_instance_ct_program_video_url_after_build($element, &$form_state) {
  $element['video_url']['#title'] = '';
  return $element;
}

/**
 * Implements hook_node_insert().
 */
function gsb_feature_program_ct_entity_insert($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Implements hook_node_update().
 */
function gsb_feature_program_ct_entity_update($node, $type) {
  if ($type == 'node') {
    _gsb_feature_program_ct_node_save($node);
  }
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function _gsb_feature_program_ct_node_save($node) {
  $lang = $node->language;
  if ($node->type != 'program') {
    return;
  }
  if ($node->path['alias'] == '') {
    return;
  }

  //Removing the thumbnail before loading
  if ($node->field_image_or_video[$lang][0]['value'] == 'Video' && !empty($node->field_video)) {
    // get field collection details
    $fc_entity_id = $node->field_video[$lang][0]['value'];
    $image_video_fc = entity_load('field_collection_item', array($fc_entity_id));
    //get the path of the thumbnail
    $uri = resources_resource_youtube_parse($image_video_fc[$fc_entity_id]->field_video_url[$lang][0]['video_url']);
    $stream_wrapper = new ResourcesYouTubeStreamWrapper();
    $stream_wrapper->setUri($uri);
    $path = $stream_wrapper->getLocalThumbnailPath($uri);

    if ($path) {
      //remove original image and image from image cache
      image_path_flush($path);
      file_unmanaged_delete($path);
    }
  }
  _gsb_feature_program_ct_create_ppp($node, 'curriculum');
  _gsb_feature_program_ct_create_ppp($node, 'faculty');
  _gsb_feature_program_ct_create_ppp($node, 'participant-profile');

  //if ($node->field_program_small_teams['und'][0]['value'] == '1') {
    //_gsb_feature_program_ct_create_ppp($node, 'team');
  //}

}

function _gsb_feature_program_ct_create_ppp($node, $ppp_type) {

  $language = $node->language;

  $ppp_node = new stdClass();  // Create a new node object
  $ppp_node->type = 'program_panelized_page';  // Content type
  $ppp_node->language = LANGUAGE_NONE;
  node_object_prepare($ppp_node);  //Set some default values

  $ppp_node->title = $node->title . ' --- ' . $ppp_type;

  $ppp_node->status = 1;   // (1 or 0): published or unpublished
  $ppp_node->promote = 0;  // (1 or 0): promoted to front page or not
  $ppp_node->sticky = 0;   // (1 or 0): sticky at top of lists or not
  $ppp_node->comment = 0;  // 2 = comments open, 1 = comments closed, 0 = comments hidden

  // Add author of the node
  $ppp_node->uid = 1;

  $path = _gsb_feature_program_ct_create_ppp_path($node, $ppp_type);
  $ppp_node->path = array(
    'alias' => $path,
    'pathauto' => 0
  );

  $path = drupal_lookup_path("source", $path);
  $found_node = menu_get_object("node", 1, $path);

  if (!$found_node) {
    // Save the new Program Panelized Page node
    node_save($ppp_node);
    // Resave the Program Panelized Page node
    // With the in-place editor option
    $ppp_node = node_load($ppp_node->nid);
    $ppp_node->field_program[$language][0]['target_id'] = $node->nid;
    $ppp_node->panelizer['page_manager']->pipeline = 'ipe';
    node_save($ppp_node);
  }
  else {
    $ppp_node = $found_node;
    if (empty($ppp_node->field_program[$language][0]['target_id']) || $ppp_node->field_program[$language][0]['target_id'] != $node->nid) {
      $ppp_node->field_program[$language][0]['target_id'] = $node->nid;
      node_save($ppp_node);
    }
  }

}

function _gsb_feature_program_ct_create_ppp_path($node, $ppp_type) {
  $language = $node->language;

  if (empty($node->path['alias'])) {
    return '';
  }

  $program_path_alias = $node->path['alias'];
  $program_path_alias_title = explode('/', $program_path_alias);
  $program_path_alias_title = $program_path_alias_title[sizeof($program_path_alias_title) - 1];

  $tid = $node->field_program_category[$language][0]['tid'];
  $term = taxonomy_term_load($tid);
  $program_base = $term->field_program_listing_page_url[$language][0]['url'];
  if (strpos($program_base, '/') == 0) {
    $program_base = ltrim($program_base, '/');
  }

  $path = $program_base . '/' . $program_path_alias_title . '/' . $ppp_type;

  return $path;
}

/**
 * Implementation of hook_block_info()
 *
 */
function gsb_feature_program_ct_block_info() {
  return array(
    'program_menu' => array(
      'info' => t('Program Menu'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'ee_section_header' => array(
      'info' => t('Header: Program CT'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'ee_section_footer' => array(
      'info' => t('Footer: Program CT'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    ),
    'ee_section_apply_brochure' => array(
      'info' => t('EE Section Apply and Brochure'),
      'cache' => DRUPAL_CACHE_GLOBAL,
    )
  );
}

/**
 * Implementation of hook_block_view
 *
 * Define callbacks for block display
 *
 */
function gsb_feature_program_ct_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'program_menu':
      $block['content'] = theme('gsb_feature_program_ct_program_menu');
      break;
    case 'ee_section_header':
      $block['content'] = theme('gsb_feature_program_ct_ee_section_header');
      break;
    case 'ee_section_footer':
      $block['content'] = theme('gsb_feature_program_ct_ee_section_footer');
      break;
    case 'ee_section_apply_brochure':
      $block['content'] = theme('gsb_feature_program_ct_ee_section_apply_brochure');
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 *
 * Define custom theme hooks
 */
function gsb_feature_program_ct_theme($existing, $type , $theme, $path) {
  return array(
    'gsb_feature_program_ct_program_menu' => array(
      'template' => 'templates/gsb-feature-program-ct-program-menu',
      'file' => 'program_menu.theme.inc',
    ),
    'gsb_feature_program_ct_ee_section_header' => array(
      'template' => 'templates/gsb-feature-program-ct-ee-section-header',
      'file' => 'ee_section_header.theme.inc',
    ),
    'gsb_feature_program_ct_ee_section_footer' => array(
      'template' => 'templates/gsb-feature-program-ct-ee-section-footer',
      'file' => 'ee_section_footer.theme.inc',
    ),
    'gsb_feature_program_ct_ee_section_apply_brochure' => array(
      'template' => 'templates/gsb-feature-program-ct-ee-section-apply-brochure',
      'file' => 'ee_section_apply_brochure.theme.inc',
    ),
    'gsb_feature_program_ct_fieldset_wrapper' => array(
      'template' => 'templates/gsb-feature-program-ct-fieldset-wrapper',
      'file' => 'fieldset_wrapper.theme.inc',
      'render element' => 'fieldset'
    )
  );
}

/**
 * Implements hook_element_info_alter().
 */
function gsb_feature_program_ct_element_info_alter(&$type) {
  $node_type = '';
  if (preg_match('(\/node\/\d{3,}\/edit)',$type['form']['#action'])) {
    $action_fragment = explode('/',$type['form']['#action'] );
    $nid = $action_fragment[2];
    $node = node_load($nid);
    $node_type = $node->type;
  }

  if (($type['form']['#action'] == '/node/add/program' || $node_type == 'program') && isset($type['fieldset'])) {
    $type['fieldset']['#theme_wrappers'] = array('gsb_feature_program_ct_fieldset_wrapper', 'fieldset'); //array_unshift($type['fieldset']['#theme_wrappers'], 'gsb_feature_program_ct_fieldset_wrapper');
  }
}

/**
 * Implements hook_field_extra_fields().
 */
function gsb_feature_program_ct_field_extra_fields() {
  $extra = array();
  $extra['node']['faculty']['display'] = array(
    'gsb_program_faculty_courses' => array(
      'label' => t('Executive Education & other Non-degree courses'),
      'description' => t('Programs taught by Faculty'),
      'weight' => 0,
    ),
    'gsb_program_faculty_director_titles' => array(
      'label' => t('Program Faculty Director Titles'),
      'description' => t('Programs where Faculty is the director.'),
      'weight' => 0,
    )
  );
  $extra['node']['program']['display'] = array(
    'gsb_program_explore_more' => array(
      'label' => t('Explore Other Programs'),
      'description' => t('Programs with same Career Levels and Key Topics'),
      'weight' => 0,
    ),
    'gsb_program_program_instance_fields' => array(
      'label' => t('Program Instance Fields'),
      'description' => t('Renders the program instance fields.'),
      'weight' => 0,
    ),
    'gsb_program_program_instance_faculty_fields' => array(
      'label' => t('Program Instance Faculty Fields'),
      'description' => t('Renders the program instance faculty fields.'),
      'weight' => 0,
    ),
    'gsb_program_curriculum_blurb' => array(
      'label' => t('Curriculum Blurb'),
      'description' => t('Renders the curriculum blurb.'),
      'weight' => 0,
    ),
    'gsb_program_participant_profile_blurb' => array(
      'label' => t('Participant Profile Blurb'),
      'description' => t('Renders the participant profile blurb.'),
      'weight' => 0,
    ),
    'gsb_program_application_requirements_blurb' => array(
      'label' => t('Application Requirements Blurb'),
      'description' => t('Renders the application_requirements blurb.'),
      'weight' => 0,
    ),
    'gsb_program_topics_location_category' => array(
      'label' => t('Topics and Program Location Category'),
      'description' => t('Renders the topics and program location category.'),
      'weight' => 0,
    ),
    'gsb_program_show_all_programs' => array(
      'label' => t('Show All Programs CTA'),
      'description' => t('Renders the show all programs cta.'),
      'weight' => 0,
    ),
  );
  return $extra;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_entity_view($entity, $type, $view_mode, $langcode) {

  // For field_video fields used in the Overview Program page
  // we don't want to have the video title shown as a link
  if ($type == 'field_collection_item') {
    if ($entity->field_name == 'field_video') {
      $current_path = current_path();
      $current_path = explode('/', $current_path);
      if (!empty($current_path[0]) && $current_path[0] == 'node') {
        $node = node_load($current_path[1]);
        if ($node && $node->type == 'program') {
          if (!empty($entity->content['field_title']['#prefix'])) {
            unset($entity->content['field_title']['#prefix']);
          }
          if (!empty($entity->content['field_title']['#suffix'])) {
            unset($entity->content['field_title']['#suffix']);
          }
        }
      }
    }
  }

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a faculty node
  if ($entity->type == 'faculty') {
    gsb_program_ct_faculty_courses($entity, $type, $view_mode, $langcode);
    gsb_program_ct_faculty_director_titles($entity, $type, $view_mode, $langcode);
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (!empty($fields['gsb_program_explore_more']['visible'])) {
    gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_program_instance_fields']['visible'])) {
    gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_program_instance_faculty_fields']['visible'])) {
    gsb_feature_program_ct_program_instance_faculty_fields($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_curriculum_blurb']['visible'])) {
    gsb_feature_program_ct_curriculum_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_participant_profile_blurb']['visible'])) {
    gsb_feature_program_ct_participant_profile_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_application_requirements_blurb']['visible'])) {
    gsb_feature_program_ct_application_requirements_blurb($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_topics_location_category']['visible'])) {
    gsb_feature_program_ct_topics_location_category($entity, $type, $view_mode, $langcode);
  }
  if (!empty($fields['gsb_program_show_all_programs']['visible'])) {
    gsb_feature_program_ct_show_all_programs($entity, $type, $view_mode, $langcode);
  }
}

/**
 * Implements hook_entity_view().
 *
 * Renders the extra fields for program faculty courses
 *   'Executive Education & other Non-degree courses'
 */
function gsb_program_ct_faculty_courses($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'faculty') {
    return;
  }

  if ($view_mode != 'full') {
    return;
  }

  // Only go thru this code if the 'program faculty courses' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_faculty_courses']['visible'])) {
    return;
  }

  // Get the faculty node id
  $nid = $entity->nid;

  $programs_found = array();

  // Run thru all the faculty ref fields found in a program instance
  $faculty_lookups = array(
    'field_data_field_faculty_directors' => 'field_faculty_directors_value',
    'field_data_field_faculty_1' => 'field_faculty_1_value',
    'field_data_field_faculty_2' => 'field_faculty_2_value',
  );

  foreach($faculty_lookups as $data_name => $value_name) {

    // get program instances

    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'status', 'type', 'created'));
    $query->condition('n.status', 1);
    $query->condition('n.type', 'program_instance');

    $query->leftJoin('field_data_field_program', 'p', 'n.nid = p.entity_id AND p.deleted = 0');

    // with faculty lookup

    $query->leftJoin($data_name, 'fx', 'n.nid = fx.entity_id AND fx.deleted = 0');
    $query->addField('fx', $value_name);

    // matching the faculty nid

    $query->leftJoin('field_data_field_person_fac_single_ref', 'fr', 'fx.' . $value_name . ' = fr.entity_id AND fr.deleted = 0');
    $query->addField('fr', 'field_person_fac_single_ref_target_id');
    $query->condition('fr.field_person_fac_single_ref_target_id', $nid, '=');

    // get the program overview intro

    $query->leftJoin('field_data_field_overview_intro', 'oi', 'oi.entity_id = p.field_program_target_id');
    $query->addField('oi', 'field_overview_intro_value');

    // get the program url alias

    $query->leftJoin('url_alias', 'ua', "ua.source = CONCAT('node/', p.field_program_target_id)");
    $query->addField('ua', 'alias');


    // get the display flag

    $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
    $query->fields('dof', array('field_display_on_finder_value'));

    // and with program lookup

    $query->leftJoin('node', 'pn', 'pn.nid = p.field_program_target_id');
    $query->addField('pn', 'title', 'program_title');
    $query->addField('pn', 'nid', 'program_nid');
    $query->condition('pn.status', '1');
    $query->condition('dof.field_display_on_finder_value', '1');

    //Detail Page and URL

    $query->leftJoin('field_data_field_program_detail', 'pd', 'pn.nid = pd.entity_id AND pd.deleted = 0');
    $query->addField('pd', 'field_program_detail_value', 'program_detail_page');
    $query->leftJoin('field_data_field_link_single', 'pu', 'pn.nid = pu.entity_id AND pu.deleted = 0');
    $query->addField('pu', 'field_link_single_url', 'link_url');
    $query->addField('pu', 'field_link_single_attributes', 'link_url_attributes');

    $results = $query->execute();

    foreach ($results as $record) {
      $programs_found[] = $record;
    }

  }

  // Remove any duplicate programs
  $programs_list = array();
  foreach($programs_found as $program) {
    if (empty($programs_list[$program->program_nid])) {
      $programs_list[$program->program_nid] = $program;
    }
  }

  // If the list is empty, then nothing for us to render
  if (empty($programs_list)) {
    return;
  }

  // Create temporary list of program items - with a sort title
  $items = array();
  foreach($programs_list as $program) {
    $sort_title = $program->program_title;
    $sort_title = preg_replace("/^The /",'',$sort_title,1);
    $sort_title = preg_replace("/^A /",'',$sort_title,1);
    $sort_title = preg_replace("/^An /",'',$sort_title,1);
    $items[$program->program_nid] = array(
      'sort_title' => $sort_title,
      'program' => $program,
    );
  }

  // Sort the programs by their title
  asort($items);

  // Wrap content and title in container for the show more functionality.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('field-type-text show-more-less show-more-less-wrapper show-more-less-num-3 show-more-less-min-5 program-faculty-courses'),
    ),
  );

  // Create the label
  $label = array(
    '#markup' => '<h2 class="title">' . t('Executive Education & Other Non-Degree Programs') . '</h2>'
  );

  // Create the list of program items - with link and overview intro text
  $list_items = array();
  foreach($items as $program_item) {
    $program = $program_item['program'];

    //Check if program has a detail page, and open external link in new window

    if ($program->program_detail_page == 0) {
      $list_items[] = '<span class="views-field-title">' . l($program->program_title, $program->alias, array(
        'attributes' => array(
          'class' => array('gsb-program-faculty-courses-program-link'),
        )
      )) . '</span><div class="views-field description-text">' . t($program->field_overview_intro_value) . '</div>';
    }
    else {
      $link_url = $program->link_url;
      $link_url_attributes = $program->link_url_attributes;
      $parsed = parse_url($link_url);
      if (!empty($parsed['scheme']) && ($parsed['scheme'] == 'http' || $parsed['scheme'] == 'https')) {
        $list_items[] = '<span class="views-field-title">' . l(t($program->program_title), $link_url, array(
          'external' => TRUE,
          'class' => array('gsb-program-faculty-courses-program-link'),
          'attributes' => unserialize($link_url_attributes)
        )) . '</span><div class="views-field description-text">' . t($program->field_overview_intro_value) . '</div>';
      }
      else {
        $list_items[] = '<span class="views-field-title">' . l($program->program_title, $link_url, array(
          'attributes' => array(
            'class' => array('gsb-program-faculty-courses-program-link'),
            'attributes' => unserialize($link_url_attributes)
          )
        )) . '</span><div class="views-field description-text">' . t($program->field_overview_intro_value) . '</div>';
      }
    }
  }

  $items = array();
  $items[] = array(
    '#theme' => 'item_list',
    '#items' => $list_items,
    '#type' => 'ul',
  );

  $content = array(
    $label,
    $items,
  );

  $container['content'] = $content;

  $entity->content['gsb_program_faculty_courses'] = $container;

}


/**
 * Implements hook_entity_view().
 *
 * Renders the extra fields for program faculty director titles
 */
function gsb_program_ct_faculty_director_titles($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'faculty') {
    return;
  }

  if ($view_mode != 'full' && $view_mode != 'faculty_leadership') {
    return;
  }

  // Only go thru this code if the 'program faculty director titles' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_faculty_director_titles']['visible'])) {
    return;
  }

  // Get the faculty node id
  $nid = $entity->nid;

  $programs_found = array();

  // Run thru directors with the faculty ref fields found in a program instance
  $faculty_lookups = array(
    'field_data_field_faculty_directors' => 'field_faculty_directors_value',
  );

  foreach ($faculty_lookups as $data_name => $value_name) {

    // get program instances

    $query = db_select('node', 'n');
    $query->fields('n', array('nid', 'status', 'type', 'created'));
    $query->condition('n.status', 1);
    $query->condition('n.type', 'program_instance');

    $query->leftJoin('field_data_field_program', 'p', 'n.nid = p.entity_id AND p.deleted = 0');

    // with faculty lookup

    $query->leftJoin($data_name, 'fx', 'n.nid = fx.entity_id AND fx.deleted = 0');
    $query->addField('fx', $value_name);

    // matching the faculty nid

    $query->leftJoin('field_data_field_person_fac_single_ref', 'fr', 'fx.' . $value_name . ' = fr.entity_id AND fr.deleted = 0');
    $query->addField('fr', 'field_person_fac_single_ref_target_id');
    $query->condition('fr.field_person_fac_single_ref_target_id', $nid, '=');

    // matching the faculty director title

    $query->leftJoin('field_data_field_faculty_director_title', 'ft', 'fx.' . $value_name . ' = ft.entity_id AND ft.deleted = 0');
    $query->addField('ft', 'field_faculty_director_title_value');

    // matching the director title other

    $query->leftJoin('field_data_field_director_title_other', 'fto', 'fx.' . $value_name . ' = fto.entity_id AND fto.deleted = 0');
    $query->addField('fto', 'field_director_title_other_value');

    // get the program director

    $query->leftJoin('url_alias', 'ua', "ua.source = CONCAT('node/', p.field_program_target_id)");
    $query->addField('ua', 'alias');

    // get the display flag

    $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
    $query->fields('dof', array('field_display_on_finder_value'));

    // and with program lookup

    $query->leftJoin('node', 'pn', 'pn.nid = p.field_program_target_id');
    $query->addField('pn', 'title', 'program_title');
    $query->addField('pn', 'nid', 'program_nid');
    $query->condition('pn.status', '1');
    $query->condition('dof.field_display_on_finder_value', '1');

    $results = $query->execute();

    foreach ($results as $record) {
      $programs_found[] = $record;
    }

  }

  // Remove any duplicate programs
  $programs_list = array();
  foreach ($programs_found as $program) {
    if (empty($programs_list[$program->program_nid])) {
      $programs_list[$program->program_nid] = $program;
    }
  }

  // If the list is empty, then nothing for us to render
  if (empty($programs_list)) {
    return;
  }

  $field_info_director_title = field_info_field('field_faculty_director_title');

  // Create temporary list of program items - with title, director title and other title
  $items = array();
  foreach($programs_list as $program) {
    $director_title = $field_info_director_title['settings']['allowed_values'][$program->field_faculty_director_title_value];
    $sort_title = $program->program_title;
    $sort_title = preg_replace("/^The /",'',$sort_title,1);
    $sort_title = preg_replace("/^A /",'',$sort_title,1);
    $sort_title = preg_replace("/^An /",'',$sort_title,1);
    $items[$program->program_nid] = array(
      'sort_title' => $sort_title,
      'title' => $program->program_title,
      'director_title' => $director_title,
      'other_title' => $program->field_director_title_other_value
    );
  }

  // Sort the programs by their title
  asort($items);

  // Create a content wrapper
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('program-faculty-director-title'),
    ),
  );

  // Create the rendering list of program items - with either...
  //   title and director title
  //   or title and other title
  $list_items = array();
  foreach($items as $program) {
    if ($program['director_title'] == 'Other') {
      $list_items[] = $program['other_title'] . ', ' . $program['title'];
    }
    else {
      $list_items[] = $program['director_title'] . ', ' . $program['title'];
    }
  }

  $items = array();
  $items[] = array(
    '#theme' => 'item_list',
    '#items' => $list_items,
    '#type' => 'ul',
    '#attributes' => array('class' => 'list-class'),
  );

  $content = array(
    $items,
  );

  $content_wrapper['content'] = $content;

  // Wrap content and title in container.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('gsb-program-faculty-director-title-wrapper'),
    ),
  );
  $container['content'] = $content_wrapper;

  $entity->content['gsb_program_faculty_director_titles'] = $container;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_explore_more($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);

  if (empty($fields['gsb_program_explore_more']['visible'])) {
    return;
  }

  // Get the list of career level tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $tids = array();
  foreach ($wrapper->field_career_level as $term) {
    if ($term->value()) {
      $tids[] = $term->value()->tid;
    }
  };

  // Get the list of key program topics tids
  $wrapper = entity_metadata_wrapper($type, $entity);
  $ktids = array();
  foreach ($wrapper->field_key_program_topics as $term) {
    if ($term->value()) {
      $ktids[] = $term->value()->tid;
    }
  };

  $nid = $entity->nid;

  // Run a query to find other programs that have key topics and career levels
  // like the program node we are viewing
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type', 'created'));
  $query->join('field_data_field_career_level', 'cl', "n.nid = cl.entity_id AND cl.entity_type = 'node'");
  $query->join('taxonomy_term_data', 't', "t.tid = cl.field_career_level_tid");
  $query->fields('t', array('tid'));
  $query->join('field_data_field_key_program_topics', 'kpt', "n.nid = kpt.entity_id AND kpt.entity_type = 'node'");
  $query->fields('kt', array('tid'));
  $query->join('taxonomy_term_data', 'kt', "kt.tid = kpt.field_key_program_topics_tid");
  $query->condition('n.nid', $nid, '<>');
  $query->condition('n.type', 'program');
  $query->condition('n.status', '1');
  if (!empty($tids)) {
    $query->condition('t.tid', $tids, 'IN');
  }
  if (!empty($ktids)) {
    $query->condition('kt.tid', $ktids, 'IN');
  }
  $query->orderBy('created', 'DESC');
  $query->orderBy('nid', 'DESC');
  $results = $query->execute();

  // Get the counts of programs that have more than one match
  $programs = array();
  foreach ($results as $record) {
    $programs[$record->nid] = (empty($programs[$record->nid])) ? 1 : $programs[$record->nid] + 1;
  }

  // Next look-up the most current program instances related to each of these programs
  $program_instances = _gsb_feature_program_ct_get_current_program_instances(array_keys($programs));
  if (empty($program_instances)) {
    return;
  }

  $pi_data = array();
  foreach($program_instances as $pi) {
    $pi_data[$pi->nid] = array(
      'program_instance_nid' => $pi->nid,
      'program_nid' => $pi->field_program_target_id,
      'match_count' => $programs[$pi->field_program_target_id],
      'instance_date' => $pi->field_instance_date_value
    );
  }

  usort($pi_data, "_gsb_feature_program_ct_match_priority_sort");

  // Only keep the top 3
  $pi_data = array_slice($pi_data, 0, 3, TRUE);

  if (empty($pi_data)) {
    return;
  }

  $program_instances = array();
  foreach($pi_data as $data) {
    $program_instances[] = $data['program_instance_nid'];
  }
  // Render the top 3 matching programs instances in the 'expore more' wrapper

  $nodes = node_load_multiple(array_values($program_instances));
  $content = node_view_multiple($nodes, 'program_explore_other');

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('explore-more-content'),
    ),
  );
  $content_wrapper['content'] = $content;

  // Wrap content and title in container.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('gsb-program-explore-more-wrapper'),
    ),
  );
  $container['content'] = $content_wrapper;

  foreach ($nodes as $node) {
    $language = $container['content']['content']['nodes'][$node->nid]['field_program']['#language'];
    $detail_page = $container['content']['content']['nodes'][$node->nid]['field_program']['#object']->field_program[$language][0]['entity']->field_program_detail['und'][0]['value'];

    if ($detail_page == 1) {
      $program_obj = $container['content']['content']['nodes'][$node->nid]['field_program']['#object'];
      $url = $program_obj->field_program[$language][0]['entity']->field_link_single[$language][0]['url'];
      $title = $program_obj->field_program[$language][0]['entity']->title;
      $new_window = $program_obj->field_program['und'][0]['entity']->field_link_single['und'][0]['attributes']['target'];
      $target = ($new_window == 1) ?  ' target="_blank"' : '';
      $container['content']['content']['nodes'][$node->nid]['field_program'][0]['#markup'] = '<a href=/' . $url . $target . '>' . $title . '</a>';
    }
  }
  $entity->content['gsb_program_explore_more'] = $container;

}

function _gsb_feature_program_ct_match_priority_sort($a, $b) {
  if ($a['match_count'] == $b['match_count']) {
    if ($a['instance_date'] > $b['instance_date']) {
      return 1;
    }
    else {
      return 0;
    }
  }
  if ($a['match_count'] < $b['match_count']) {
    return 1;
  }
  return -1;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_program_instance_fields($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_program_instance_fields']['visible'])) {
    return;
  }

  drupal_add_js(drupal_get_path('module', 'gsb_feature_program_ct') . '/js/gsb_feature_program_ct.js');

  $nid = $entity->nid;
  $language = $entity->language;

  // Lookup the program instances for this program
  $program_instance_nids = _gsb_feature_program_ct_get_all_program_instances(array($nid));

  $node_wrapper = entity_metadata_wrapper('node', $nid);
  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();
  $program_listing_page_url = '';
  if (!empty($program_category->field_program_listing_page_url[$language][0]['url'])) {
    $program_listing_page_url = $program_category->field_program_listing_page_url[$language][0]['url'];
  }

  $topics = array();
  $locations = array();

  $program_instance_markups = array();
  foreach ($program_instance_nids as $pi_nid) {

    $instance_wrapper = entity_metadata_wrapper('node', $pi_nid);
    // get instance label
    $instance_label = $instance_wrapper->field_instance_label->value();

    // get instance date
    $instance_date = $instance_wrapper->field_instance_date->value();
    $formatted_date = '';
    if ($instance_date != null) {
      $start_date = new DateTime($instance_date['value']);
      $formatted_date = $start_date->format('d M Y');
      if (!empty($instance_date['value2'])) {
        $end_date = new DateTime($instance_date['value2']);
        $formatted_date = $formatted_date . ' – ' . $end_date->format('d M Y');
      }
    }

    // add instance header (label and date) markup as -first item-
    $instance_hdr = '<h2 class="instance-header">';
    if (!empty($instance_label)) {
      $instance_hdr .= $instance_label;
    }
    if (!empty($formatted_date)) {
      if (!empty($instance_label)) {
        $instance_hdr .= '<span class="pipe">|</span>';
      }
      $instance_hdr .= $formatted_date;
    }
    else {
      $instance_text = $instance_wrapper->field_instance_text->value();
      if (!empty($instance_label)) {
        $instance_hdr .= '<span class="pipe">|</span>';
      }
      $instance_hdr .= $instance_text;
    }
    $instance_hdr .= '</h2>';
    $program_instance_markups[$pi_nid][] = $instance_hdr;

    $program_instance_markups[$pi_nid][] = '<div class="group-left">';
    $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper format-wrapper">';
    $program_instance_markups[$pi_nid][] = '<h3>Format</h3>';

    // add program format markup
    $program_format_location = $instance_wrapper->field_program_location->value();
    $ewrap_format_location = entity_metadata_wrapper('field_collection_item', $program_format_location);
    $program_format = $ewrap_format_location->field_program_format->value();
    $program_location = $ewrap_format_location->field_program_location_link->value();
    $program_format_out = '<div class="program-format-location">';
    if (!empty($program_format->name)) {
      $program_format_out .= $program_format->name;
    }
    if (!empty($program_location['title'])) {
      if (!empty($program_format->name)) {
        $program_format_out .= '<span class="pipe">|</span>';
      }
      $location = $program_location['title'];

      if (!empty($program_location['url'])) {
        $program_location['attributes']['target'] = (string)$program_location['attributes']['target'] == '0' ? '' : $program_location['attributes']['target'];
        $location = l($program_location['title'], $program_location['url'], array('attributes' => $program_location['attributes']));
      }
      $program_format_out .= $location;
    }
    $program_format_out .= '</div>';
    $program_instance_markups[$pi_nid][] = $program_format_out;

    // add time commitment markup
    $time_commitment = $node_wrapper->field_time_commitment->value();
    $program_instance_markups[$pi_nid][] = '<div class="time-commitment">' . $time_commitment->name . '</div>';

    // if the time commit is 'Part-Time', then add parttime details
    if ($time_commitment->name == 'Part-Time') {
      $part_time_details = $node_wrapper->field_part_time_details->value();
      $program_instance_markups[$pi_nid][] = '<div class="parttime-details">' . $part_time_details . '</div>';
    }

    $program_instance_markups[$pi_nid][] = '</div>';

    // add program schedule markup
    $program_schedule = $instance_wrapper->field_program_schedule->value();

    if ($program_schedule) {

      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper schedule-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3>' . t('Program Schedule') . '</h3>';

      foreach ($program_schedule as $ps) {
        $ewrap_schedule = entity_metadata_wrapper('field_collection_item', $ps);
        $schedule_body = $ewrap_schedule->field_body->value();
        $program_date = $ewrap_schedule->field_program_date->value();
        $formatted_date = '';
        if ($program_date) {
          $start_date = new DateTime($program_date['value']);
          $formatted_date = $start_date->format('d M Y');
          if (!empty($program_date['value2'])) {
            $end_date = new DateTime($program_date['value2']);
            $formatted_date = $formatted_date . ' – ' . $end_date->format('d M Y');
          }
        }
        if (!empty($formatted_date) || !empty($schedule_body)) {
          $program_instance_markups[$pi_nid][] = '<div class="schedule-item-wrapper">';
          if (!empty($formatted_date)) {
            $program_instance_markups[$pi_nid][] = '<div class="program-schedule-date">' . $formatted_date . '</div>';
          }
          if (!empty($schedule_body)) {
            $program_instance_markups[$pi_nid][] = '<div class="program-schedule-description">' . $schedule_body . '</div>';
          }
          $program_instance_markups[$pi_nid][] = '</div>';
        }
      }

      $program_instance_markups[$pi_nid][] = '</div>';
    }

    // add app_requirements_url markup from program
    $app_requirements_link = $node_wrapper->field_application_requirements->value();
    if ($app_requirements_link) {

      // build the Application Requirements link
      $link = array();
      $link['text'] = t('Application Requirements');
      $link['path'] = $app_requirements_link['url'];
      $link['options']['attributes'] = $app_requirements_link['attributes'];
      $link['options']['html'] = null;

      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper application-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3 class="app-requirements-link">' . theme('link', $link) . '</h3>';
      $program_instance_markups[$pi_nid][] = '<div class="program-deadline-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h4 class="deadline-header">Deadline</h4>';

      // add program application deadline markup
      $application_state = $instance_wrapper->field_application_state->value();
      //$waitlist = $instance_wrapper->field_waitlist_only->value();

      if ($application_state == '4') {
        $program_instance_markups[$pi_nid][] = "The application is closed.";
      } else {
        $program_deadline = $instance_wrapper->field_application_deadlines->value();
        foreach ($program_deadline as $pd) {
          $ewrap_deadline = entity_metadata_wrapper('field_collection_item', $pd);
          $deadline_text = $ewrap_deadline->field_deadline_text->value();
          $deadline_date = $ewrap_deadline->field_date->value();
          $formatted_date = '';
          if ($deadline_date) {
            $start_date = DateTime::createFromFormat('U', $deadline_date);
            $formatted_date = $start_date->format('d M Y');
          }
          $deadline = '<div class="program-deadline">';
//          if ($application_state == '5'){
//            if($waitlist) {
//              $deadline .= "Still accepting applications for waitlist only. ";
//            } else {
//              $deadline .= "Still accepting applications. ";
//            }
//            if (!empty($formatted_date)) {
//              $deadline .= "Deadline extended to " . $formatted_date . ".";
//            }
//
//          } else
          if ($application_state == "3" ) {
            $deadline .= $deadline_text;
          } else {
            if (!empty($deadline_text)) {
              $deadline .= $deadline_text;
            }
            if (!empty($formatted_date)) {
              if (!empty($deadline_text)) {
                $deadline .= '<span class="pipe">|</span>';
              }
              $deadline .= $formatted_date;
            }
          }
          $deadline .= '</div>';
          $program_instance_markups[$pi_nid][] = $deadline;
        }
      }
      $program_instance_markups[$pi_nid][] = '</div>';
      $program_instance_markups[$pi_nid][] = '</div>';
    }

    $program_instance_markups[$pi_nid][] = '</div>';

    $program_instance_markups[$pi_nid][] = '<div class ="group-right">';
    $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper tuition-wrapper">';
    $program_instance_markups[$pi_nid][] = '<h3>Program Fee</h3>';

    // add tuition amount markup
    $tuition = $instance_wrapper->field_tuition->value();
    $tuition_markup = '<div class="tuition-amount">';
    if (!empty($tuition['url'])) {
      $tuition['attributes']['target'] = $tuition['attributes']['target'] == 0 ? '' : $tuition['attributes']['target'];
      $tuition_markup .= l($tuition['title'], $tuition['url'], array('attributes' => $tuition['attributes']));
    }
    else {
      $tuition_markup .= $tuition['title'];
    }
    $tuition_markup .= '</div>';
    $program_instance_markups[$pi_nid][] = $tuition_markup;

    // add included in tuition markup
    $included_in_tuition = $instance_wrapper->field_included_in_tuition->value();
    $program_instance_markups[$pi_nid][] = '<div class="included-in-tuition">' . $included_in_tuition['safe_value'] . '</div>';

    // add payment cancellation markup
    $payment_cancellation = $instance_wrapper->field_payment_cancellation->value();
    if ($payment_cancellation) {
      $program_instance_markups[$pi_nid][] =
        '<div class="payment-cancellation">' .
          '<a href="/' . $payment_cancellation['url'] . '">' . t('Learn more about payment, financial aid, and cancellation policies') . '</a>' .
        '</div>';
    }

    // add optional programming markup
    $optional_programming = $instance_wrapper->field_optional_programming->value();
    if ($optional_programming) {
      $program_instance_markups[$pi_nid][] = '<div class="optional-programming">' . $optional_programming['safe_value'] . '</div>';
    }
    $program_instance_markups[$pi_nid][] = '</div>';

    // seek in a couple program fields
    // add awarded_upon_completion markup from program
    $awarded_upon_completion = $node_wrapper->field_awarded_upon_completion->value();
    if ($awarded_upon_completion) {
      $program_instance_markups[$pi_nid][] = '<div class="instance-item-wrapper awarded-wrapper">';
      $program_instance_markups[$pi_nid][] = '<h3>Awarded</h3>';
      $program_instance_markups[$pi_nid][] = '<div class="awarded-upon-completion">' . $awarded_upon_completion . '</div>';
      $program_instance_markups[$pi_nid][] = '</div>';
    }

    // add program topics from program - to the topics array
    $program_topics = $node_wrapper->field_program_topics->value();
    foreach($program_topics as $pt) {
      $topics[] = $pt;
    }

    // add program location from program instance - to the program locations array
    $program_location_categories = $ewrap_format_location->field_program_location_category->value();
    $locations[] = $program_location_categories;

    $program_instance_markups[$pi_nid][] = '</div>';

  }

  // Wrap content and title in container.
  $container = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('gsb-program-program-instance-fields'),
    ),
  );

  $instance_wrappers = array();

  foreach ($program_instance_markups as $pi_markup) {

    // Wrap content in container.
    $content_wrapper = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('instance-wrapper'),
      ),
    );

    // get the header as the first item in the list of markup
    $header = array_shift($pi_markup);

    $show_info = '';
    if (count($program_instance_nids) > 1) {
      $show_info = '<span class="instance-show-information">' . t('Show Program Information') . '</span>';
    }

    $content_wrapper['content'] = array('#markup' =>
      $header .
      $show_info .
      '<div class="instance-information">' .
      implode(" ", $pi_markup) .
      '</div>'
    );

    $instance_wrappers['content'][] = $content_wrapper;

  }

  // create the topics markup
  $topic_names = array();
  foreach($topics as $delta => $item) {
    $topic_names[] = $item->name;
  }
  $topic_names = array_unique($topic_names);
  asort($topic_names);
  $topic_names = array_values($topic_names);
  $topics_markup = '';
  $count = count($topic_names);
  foreach($topic_names as $delta => $item) {
    $path = $program_listing_page_url . '?program-topic=' . str_replace(' ', '-', strtolower($item));
    $topics_markup .= '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $topics_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // create the locations markup
  $location_names = array();
  foreach($locations as $delta => $item) {
    $location_names[] = $item->name;
  }
  $location_names = array_unique($location_names);
  asort($location_names);
  $location_names = array_values($location_names);
  $locations_markup = '';
  $count = count($location_names);
  foreach($location_names as $delta => $item) {
    $name = str_replace(' ', '-', strtolower($item));
    $name = str_replace('(', '', $name);
    $name = str_replace(')', '', $name);
    $name = str_replace('.', '', $name);
    $path = $program_listing_page_url . '?program-location=' . $name;
    $locations_markup .= '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $locations_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // create the program category markup
  $path = $program_listing_page_url;
  $program_category_markup = array();
  $program_category_markup[] = '<a href="' . base_path() . $path . '">' . $program_category->name . '</a>';

  // Wrap a taxonomy container around the topics and program location links

  $topics_locations_markup = $topics_markup;
  if (!empty($topics_markup)) {
    $topics_locations_markup .= '<span class="separator">' . check_plain(', ') . '</span>';
  }
  $topics_locations_markup .= $locations_markup;

  $taxonomy_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('instance-taxonomy'),
    ),
    'content' => array('#markup' => $topics_locations_markup)
  );

  $instance_wrappers['content'][] = $taxonomy_wrapper;

  $container['content'] = $instance_wrappers;

  $entity->content['gsb_program_program_instance_fields'] = $container;

}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_program_instance_faculty_fields($entity, $type, $view_mode, $langcode) {

  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  // Only go thru this code if the 'explore more' field is visible
  $fields = field_extra_fields_get_display('node', $entity->type, $view_mode);
  if (empty($fields['gsb_program_program_instance_faculty_fields']['visible'])) {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  // Lookup the program instances for this program
  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->leftJoin('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->leftJoin('field_data_field_instance_text', 'fit', "n.nid = fit.entity_id AND fit.entity_type = 'node' AND fit.deleted = '0'");
  $query->fields('fit', array('field_instance_text_value'));
  $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
  $query->fields('dof', array('field_display_on_finder_value'));
  $query->condition('nodefp.nid', $nid);
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('dof.field_display_on_finder_value', '1');
  $query->orderBy('fid.field_instance_date_value', 'ASC');
  $query->range(0,1);
  $results = $query->execute();

  $faculty_directors = array();
  foreach ($results as $record) {
    $instance_wrapper = entity_metadata_wrapper('node', $record->nid);
    foreach ($instance_wrapper->field_faculty_directors as $key => $fci) {
      $view = $fci->view('faculty_leadership');
      $id = $fci->getIdentifier();
      if (isset($view['field_collection_item'][$id])) {
        $faculty_directors[$id] = $view['field_collection_item'][$id];
        $faculty_directors[$id]['#weight'] = $key;
      }
    }
  }
  if (!empty($faculty_directors)) {
    foreach ($faculty_directors as $key => $fci) {
      if (empty($faculty_directors[$key]['field_other_name'])) {
        unset($faculty_directors[$key]['field_image_single_public']);
      }
    }
    $entity->content['gsb_program_program_instance_faculty_fields'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'faculty-leadership-wrapper',
          ),
        ),
      ) + $faculty_directors;

    // $entity->content['gsb_program_program_instance_faculty_fields'] = $faculty_directors;
  }
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_curriculum_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('curriculum-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="curriculum-blurb">';
  $blurb_markup .= empty($program_category->field_curriculum_blurb[$language]) ? '' : $program_category->field_curriculum_blurb[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_curriculum_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_participant_profile_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('participant-profile-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="participant-profile-blurb">';
  $blurb_markup .= empty($program_category->field_participant_profile_blurb[$language]) ? '' : $program_category->field_participant_profile_blurb[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_participant_profile_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_application_requirements_blurb($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('application-requirements-blurb-wrapper'),
    ),
  );

  $blurb_markup = '<div class="application-requirements-blurb">';
  $blurb_markup .= empty($program_category->field_application_requirements_b[$language]) ? '' : $program_category->field_application_requirements_b[$language][0]['safe_value'];
  $blurb_markup .= '</div>';
  $content_wrapper['content'] = array('#markup' => $blurb_markup);

  $entity->content['gsb_program_application_requirements_blurb'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_topics_location_category($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  $program_instances = _gsb_feature_program_ct_get_all_program_instances(array($nid));

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();
  $program_listing_page_url = '';
  if (!empty($program_category->field_program_listing_page_url[$language][0]['url'])) {
    $program_listing_page_url = $program_category->field_program_listing_page_url[$language][0]['url'];
  }

  // get program's topics
  $program_topics = $node_wrapper->field_program_topics->value();

  $topics = array();
  foreach( $program_topics as $item) {
    $topics[] = $item->name;
  }

  // create the topics markup
  $topics_markup = array();
  $count = count($topics);
  foreach($topics as $delta => $item) {
    $path = $program_listing_page_url . '?program-topic=' . str_replace(' ', '-', strtolower($item));
    $topics_markup[] = '<a href="' . base_path() . $path . '">' . check_plain($item) . '</a>';
    if ($delta != $count - 1) {
      $topics_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  $location_categories = array();
  foreach ($program_instances as $pi_nid) {
    $instance_wrapper = entity_metadata_wrapper('node', $pi_nid);
    $program_location = $instance_wrapper->field_program_location->value();
    $ewrap_location = entity_metadata_wrapper('field_collection_item', $program_location);
    $program_location_category = $ewrap_location->field_program_location_category->value();
    $location_categories[] = $program_location_category->name;
  }

  // create the program category markup
  $location_categories_markup = array();
  $location_categories = array_unique($location_categories);
  $count = count($location_categories);
  foreach($location_categories as $delta => $item) {
    $name = str_replace(' ', '-', strtolower($item));
    $name = str_replace('(', '', $name);
    $name = str_replace(')', '', $name);
    $name = str_replace('.', '', $name);
    $path = $program_listing_page_url . '?program-location=' . $name;
    $location_categories_markup[] = '<a href="' . base_path() . $path . '">' . $item . '</a>';
    if ($delta != $count - 1) {
      $location_categories_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
  }

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('topics-location-category-wrapper'),
    ),
  );

  $topics_location_categories_markup = array();
  if (!empty($topics_markup)) {
    $topics_location_categories_markup[] = implode('', $topics_markup);
  }
  if (!empty($location_categories_markup)) {
    if (!empty($topics_markup)) {
      $topics_location_categories_markup[] = '<span class="separator">' . check_plain(', ') . '</span>';
    }
    $topics_location_categories_markup[] = implode('', $location_categories_markup);
  }
  $content_wrapper['content'] = array('#markup' =>
    '<div class=topics-location-category-">' .
      implode('', $topics_location_categories_markup) .
    '</div>'
  );

  $entity->content['gsb_program_topics_location_category'] = $content_wrapper;
}

/**
 * Implements hook_entity_view().
 */
function gsb_feature_program_ct_show_all_programs($entity, $type, $view_mode, $langcode) {
  // Only go thru this code if we are working with a node
  if ($type != 'node') {
    return;
  }
  // Only go thru this code if we are working with a program node
  if ($entity->type != 'program') {
    return;
  }
  // Only go thru this code if we are working with view mode full
  if ($view_mode != 'full') {
    return;
  }

  $nid = $entity->nid;
  $language = $entity->language;

  $node_wrapper = entity_metadata_wrapper('node', $nid);

  // get listing page url from program's program category
  $program_category = $node_wrapper->field_program_category->value();

  $program_listing_page_url = 'programs';
  if ($program_category->name == 'Exec Ed Program') {
    $program_listing_page_url = 'exec-ed/programs';
  }

  // Wrap content in container.
  $content_wrapper = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('program-programs-cta-wrapper'),
    ),
  );

  $programs_link = '<a href="' . base_path() . $program_listing_page_url . '">' . t('See All Programs') . '</a>';

  $content_wrapper['content'] = array('#markup' =>
    '<div class="program-programs-cta">' .
      $programs_link .
    '</div>'
  );

  $entity->content['gsb_program_show_all_programs'] = $content_wrapper;
}

/**
 * Get all program instances related to each of these programs
 */
function _gsb_feature_program_ct_get_all_program_instances($program_nids) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->leftJoin('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
  $query->fields('dof', array('field_display_on_finder_value'));
  $query->condition('nodefp.nid', $program_nids, 'IN');
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('dof.field_display_on_finder_value', '1');
  $query->orderBy('fid.field_instance_date_value', 'ASC');
  $results = $query->execute();

  $program_instances = array();
  $program_instances_no_date = array();
  foreach($results as $instance) {
    if ($instance->field_instance_date_value == null) {
      $program_instances_no_date[] = $instance->nid;
    }
    else {
      $program_instances[] = $instance->nid;
    }
  }

  // we need to add the instance with no date to the end of the list of instances
  if (!empty($program_instances_no_date)) {
    $program_instances = array_merge($program_instances, $program_instances_no_date);
  }

  return $program_instances;
}

/**
 * Get the most current program instances related to each of these programs
 */
function _gsb_feature_program_ct_get_current_program_instances_ids($program_nids) {

  $results = _gsb_feature_program_ct_get_current_program_instances($program_nids);

  $program_instances = array();
  foreach($results as $instance) {
    if (empty($program_instances[$instance->field_program_target_id])) {
      $program_instances[$instance->field_program_target_id] = $instance->nid;
    }
  }

  return $program_instances;
}

/**
 * Get the most current program instances related to each of these programs
 */
function _gsb_feature_program_ct_get_current_program_instances($program_nids) {

  if (empty($program_nids)) {
    return null;
  }

  $today = date('Y-m-d H:i:s', mktime(0,0,0));

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'status', 'type'));
  $query->join('field_data_field_program', 'fp', "n.nid = fp.entity_id AND fp.entity_type = 'node' AND fp.deleted = '0'");
  $query->fields('fp', array('entity_id', 'entity_type', 'deleted', 'field_program_target_id'));
  $query->join('node', 'nodefp', 'fp.field_program_target_id = nodefp.nid');
  $query->fields('nodefp', array('nid'));
  $query->join('field_data_field_instance_date', 'fid', "n.nid = fid.entity_id AND fid.entity_type = 'node' AND fid.deleted = '0'");
  $query->fields('fid', array('field_instance_date_value'));
  //$query->join('field_data_field_display_on_finder_select', 'fdo', "n.nid = fdo.entity_id AND fdo.entity_type = 'node' AND fdo.deleted = '0'");
  $query->join('field_data_field_display_on_finder', 'dof', "n.nid = dof.entity_id AND dof.entity_type = 'node' AND dof.deleted = '0'");
  $query->condition('nodefp.nid', $program_nids, 'IN');
  $query->condition('n.status', '1');
  $query->condition('n.type', 'program_instance');
  $query->condition('fid.field_instance_date_value', $today, '>=');
  //$query->condition('fdo.field_display_on_finder_select_value', 'visible', '=');
  $query->condition('dof.field_display_on_finder_value', '1');
  $query->orderBy('fid.field_instance_date_value', 'ASC');
  $results = $query->execute();

  $program_instances = array();
  foreach($results as $instance) {
    $program_instances[] = $instance;
  }

  return $program_instances;
}
